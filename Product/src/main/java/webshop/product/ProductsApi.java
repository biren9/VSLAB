/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package webshop.product;

import webshop.product.Model.Product;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-12-07T12:32:53.920Z")

@Api(value = "products", description = "the products API")
@RequestMapping(value = "/vslab/Aufgabe2/1.0.0")
public interface ProductsApi {

    @ApiOperation(value = "", nickname = "addProduct", notes = "", response = Boolean.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "add success", response = Boolean.class),
        @ApiResponse(code = 401, message = "Access denied"),
        @ApiResponse(code = 406, message = "Not Acceptable - unknown categoryId", response = Error.class) })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Boolean> addProduct(@NotNull @ApiParam(value = "Product name", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "Product detail", required = true) @Valid @RequestParam(value = "detail", required = true) String detail,@NotNull @ApiParam(value = "Product price", required = true) @Valid @RequestParam(value = "price", required = true) String price,@NotNull @ApiParam(value = "Category Id", required = true) @Valid @RequestParam(value = "categoryId", required = true) Integer categoryId);


    @ApiOperation(value = "", nickname = "deleteProduct", notes = "", response = Boolean.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "delete success", response = Boolean.class),
        @ApiResponse(code = 401, message = "Access denied"),
        @ApiResponse(code = 406, message = "Not Acceptable - unknown productId", response = Error.class) })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Boolean> deleteProduct(@ApiParam(value = "product Id",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "exactProduct", notes = "", response = Product.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "register success", response = Product.class),
        @ApiResponse(code = 401, message = "Access denied"),
        @ApiResponse(code = 404, message = "No product with ID") })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Product> exactProduct(@ApiParam(value = "product Id",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "updateProduct", notes = "", response = Boolean.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "update success", response = Boolean.class),
        @ApiResponse(code = 401, message = "Access denied"),
        @ApiResponse(code = 406, message = "Not Acceptable - unknown categoryId", response = Error.class) })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Boolean> updateProduct(@ApiParam(value = "product Id",required=true) @PathVariable("id") Integer id,@NotNull @ApiParam(value = "Product name", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "Product detail", required = true) @Valid @RequestParam(value = "detail", required = true) String detail,@NotNull @ApiParam(value = "Product price", required = true) @Valid @RequestParam(value = "price", required = true) String price,@NotNull @ApiParam(value = "Category Id", required = true) @Valid @RequestParam(value = "categoryId", required = true) Integer categoryId);

}
